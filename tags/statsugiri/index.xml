<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Statsugiri on kelvinkoon.dev</title><link>https://kelvinkoon.github.io/tags/statsugiri/</link><description>Recent content in Statsugiri on kelvinkoon.dev</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 16 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://kelvinkoon.github.io/tags/statsugiri/index.xml" rel="self" type="application/rss+xml"/><item><title>Exploring Efficient DynamoDB Schemas</title><link>https://kelvinkoon.github.io/posts/exploring-efficient-ddb-schemas/</link><pubDate>Sun, 16 Apr 2023 00:00:00 +0000</pubDate><guid>https://kelvinkoon.github.io/posts/exploring-efficient-ddb-schemas/</guid><description>&lt;p>Upon finishing the &lt;a href="https://kelvinkoon.github.io/posts/state-machines-pipelines-pokemon">PS ingestion&lt;/a> pipeline, next on the list was to implement a back-end as a means to serve the team data. Thus, this post discusses design considerations for the aforementioned &lt;code>PsTeamsService&lt;/code>. You can try out the API &lt;a href="https://api.statsugiri.gg/teams/gen9vgc2023regulationc/today">here&lt;/a>, complete with &lt;a href="https://github.com/StatsugiriLabs/Statsugiri/wiki/PS-Teams-API-Usage">usage documentation&lt;/a>.&lt;/p>
&lt;h2 id="serverless-simplicity">Serverless Simplicity&lt;/h2>
&lt;p>

&lt;figure>
 &lt;img src="https://kelvinkoon.github.io/images/PsTeamsServiceArchitecture.png" alt="PS Teams Service Architecture" loading="lazy" />
 &lt;figcaption>PS Teams Service high-level design.&lt;/figcaption>
&lt;/figure>

&lt;/p>
&lt;p>You can find a full-size image of the high-level design &lt;a href="https://kelvinkoon.github.io/images/PsTeamsServiceArchitecture.png">here&lt;/a>.&lt;/p>
&lt;p>After some discussion, I opted for AWS Lambda and API Gateway to handle requests to the DynamoDB storage. Consideration was made for hosting the service on ECS Fargate, but the incurred additional cost and maintenance for compute didn&amp;rsquo;t feel justified. Fewer resources also means fewer points of failure.&lt;/p></description></item><item><title>State Machines, Pipelines, and Pokémon</title><link>https://kelvinkoon.github.io/posts/state-machines-pipelines-pokemon/</link><pubDate>Fri, 10 Feb 2023 00:00:00 +0000</pubDate><guid>https://kelvinkoon.github.io/posts/state-machines-pipelines-pokemon/</guid><description>&lt;p>A year ago, I launched babiri&amp;rsquo;s open-source API. The project&amp;rsquo;s development halted shortly after as I acclimated to full-time work. The service proceeded to implode a few months after, left in radio silence until recently. Over the past few months, I&amp;rsquo;ve focused on developing a new suite of robust data tools. I&amp;rsquo;m happy to share what I&amp;rsquo;ve learned from industry to productionalize projects intersecting with my interests.&lt;/p>
&lt;p>This post primarily covers the architecture for the new pipeline for daily data ingest pertaining to &lt;a href="https://pokemonshowdown.com/">Pokémon Showdown&lt;/a> high-ranked teams.&lt;/p></description></item></channel></rss>